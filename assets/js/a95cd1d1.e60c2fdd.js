"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6736],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(t),g=a,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||l;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8125:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const l={id:"golang-code-style",title:"Golang Code Style",sidebar_position:1},o="golang code style",i={unversionedId:"golang/golang-code-style",id:"golang/golang-code-style",title:"Golang Code Style",description:"ERROR",source:"@site/studynotes/golang/golang-code-style.md",sourceDirName:"golang",slug:"/golang/golang-code-style",permalink:"/studynotes/golang/golang-code-style",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"golang-code-style",title:"Golang Code Style",sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"golang",permalink:"/studynotes/category/golang"},next:{title:"Golang Flag Example",permalink:"/studynotes/golang/golang-flag"}},s={},u=[{value:"ERROR",id:"error",level:2},{value:"Returning errors",id:"returning-errors",level:3},{value:"Error strings",id:"error-strings",level:3},{value:"Handle errors",id:"handle-errors",level:3},{value:"Language",id:"language",level:2},{value:"Nil slices",id:"nil-slices",level:3},{value:"Indentation confusion",id:"indentation-confusion",level:3},{value:"Function formatting",id:"function-formatting",level:3},{value:"Conditionals and loops",id:"conditionals-and-loops",level:3},{value:"Copy",id:"copy",level:3},{value:"Pass values",id:"pass-values",level:3},{value:"Receiver type",id:"receiver-type",level:3},{value:"Use %q",id:"use-q",level:3},{value:"Common libraries",id:"common-libraries",level:2},{value:"Flags",id:"flags",level:3},{value:"Contexts",id:"contexts",level:3},{value:"Table-driven tests",id:"table-driven-tests",level:3}],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"golang-code-style"},"golang code style"),(0,a.kt)("h2",{id:"error"},"ERROR"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"returning-errors"},"Returning errors"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u7528 error \u8868\u793a\u4e00\u500b function \u53ef\u80fd\u6703\u8655\u7406\u5931\u6557\u72c0\u6cc1"),(0,a.kt)("li",{parentName:"ul"},"error \u901a\u5e38\u653e\u5728\u56de\u50b3\u7684\u6700\u5f8c\u4e00\u500b\u53c3\u6578")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func Good() error { /* ... */ }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u6709\u56de\u50b3 error\uff0c\u8acb\u7528 ",(0,a.kt)("inlineCode",{parentName:"li"},"error")," type \u4e0d\u7136\u5bb9\u6613\u9020\u6210 bug")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Bad:\nfunc Bad() *os.PathError { /*...*/ }\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"Tip")," : \u5982\u679c function arg \u5305\u542b ",(0,a.kt)("inlineCode",{parentName:"p"},"context.Context")," \u901a\u5e38\u90fd\u6703 return ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," \uff0c caller \u53ef\u4ee5\u4f7f\u7528\u6b64 error \u4f86\u5224\u65b7 context \u662f\u5426\u9700\u8981 cancel")),(0,a.kt)("h3",{id:"error-strings"},"Error strings"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"error string \u4e0d\u61c9\u8a72\u662f\u5927\u5beb")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Bad:\nerr := fmt.Errorf("Something bad happened.")\n// Good:\nerr := fmt.Errorf("something bad happened")\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"logging, test failure, API response, or other UI \u61c9\u8a72\u70ba\u5927\u5beb")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Good:\nlog.Infof("Operation aborted: %v", err)\nlog.Errorf("Operation aborted: %v", err)\nt.Errorf("Op(%q) failed unexpectedly; err=%v", args, err)\n')),(0,a.kt)("h3",{id:"handle-errors"},"Handle errors"),(0,a.kt)("p",null,"\u8655\u7406 error \u7684\u6642\u5019\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," \u8b8a\u6578\u662f\u4e0d\u9069\u7576\u7684\n\u5982\u679c\u4e00\u500b function \u6703 return \u4e00\u500b error \uff0c \u4ee5\u4e0b\u662f\u9069\u7576\u7684\u8655\u7406\u65b9\u6cd5"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u7acb\u5373\u8655\u7406\u9019\u500b error"),(0,a.kt)("li",{parentName:"ol"},"return errro \u7d66 caller"),(0,a.kt)("li",{parentName:"ol"},"\u5982\u679c\u767c\u751f\u9810\u671f\u4e4b\u5916\u7684\u72c0\u6cc1\uff0c\u8acb\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"li"},"panic")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"fatal"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6709\u4e9b\u7f55\u898b\u72c0\u6cc1\u6703\u5ffd\u7565\u6389 error \uff0c \u9019\u6642\u5019\u5fc5\u9808\u52a0\u4e0a\u9069\u7576\u7684 commend \u89e3\u91cb\u70ba\u4ec0\u9ebc\u4e0d\u7528\u8655\u7406 error")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\nvar b *bytes.Buffer\n\nn, _ := b.Write(p) // never returns a non-nil error\n")),(0,a.kt)("h2",{id:"language"},"Language"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"nil-slices"},"Nil slices"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u60f3\u8981\u5ba3\u544a\u4e00\u500b \u7a7a\u503c slice")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\nvar t []string\n// Bad:\nt := []string{}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4e0d\u61c9\u8a72\u8b93 client \u81ea\u5df1\u5224\u65b7 return \u56de\u4f86\u7684\u503c\u662f\u5426\u70ba\u7a7a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\n// Ping pings its targets.\n// Returns hosts that successfully responded.\nfunc Ping(hosts []string) ([]string, error) { ... }\n\n// Bad:\n// Ping pings its targets and returns a list of hosts\n// that successfully responded. Can be empty if the input was empty.\n// nil signifies that a system error occurred.\nfunc Ping(hosts []string) []string { ... }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5728 design an interface \u6642\uff0c\u76e1\u91cf\u907f\u514d\u5340\u5206 ",(0,a.kt)("inlineCode",{parentName:"li"},"nil")," or non-",(0,a.kt)("inlineCode",{parentName:"li"},"nil"),", zero-length slice")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\n// describeInts describes s with the given prefix, unless s is empty.\nfunc describeInts(prefix string, s []int) {\n    if len(s) == 0 {\n        return\n    }\n    fmt.Println(prefix, s)\n}\n")),(0,a.kt)("h3",{id:"indentation-confusion"},"Indentation confusion"),(0,a.kt)("p",null,"\u7576\u540c\u4e00\u884c code \u904e\u9577\u9700\u8981\u63db\u884c\u6642\u9020\u6210\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"\u7e2e\u6392\u6df7\u6dc6")),(0,a.kt)("p",null,"\u53ef\u4ee5\u7528\u4e0b\u9762\u4e09\u7a2e\u65b9\u6cd5\u8655\u7406"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#function-formatting"},"Function formatting")),(0,a.kt)("li",{parentName:"ul"},"[Conditionals and loops]"),(0,a.kt)("li",{parentName:"ul"},"[Literal formatting]")),(0,a.kt)("h3",{id:"function-formatting"},"Function formatting"),(0,a.kt)("p",null,"\u7576 function arg \u53c3\u6578\u904e\u904e\u591a\u6642\u9020\u6210\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"\u7e2e\u6392\u6df7\u6dc6")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Bad:\nfunc (r *SomeType) SomeLongFunctionName(foo1, foo2, foo3 string,\n    foo4, foo5, foo6 int) {\n    foo7 := bar(foo1)\n    // ...\n}\n")),(0,a.kt)("p",null,"\u53ef\u4ee5\u5ba3\u544a\u4e00\u500b ",(0,a.kt)("a",{parentName:"p",href:"https://google.github.io/styleguide/go/best-practices#option-structure"},"Option structure")," \u8655\u7406"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\ngood := foo.Call(long, CallOptions{\n    Names:   list,\n    Of:      of,\n    The:     parameters,\n    Func:    all,\n    Args:    on,\n    Now:     separate,\n    Visible: lines,\n})\n")),(0,a.kt)("p",null,"\u5982\u679c call-site \u66f4\u9577\u7684\u8a71\u5617\u8a66 refactoring:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Good:\n// Sometimes variadic arguments can be factored out\nreplacements := []string{\n    "from", "to", // related values can be formatted adjacent to one another\n    "source", "dest",\n    "original", "new",\n}\n\n// Use the replacement struct as inputs to NewReplacer.\nreplacer := strings.NewReplacer(replacements...)\n')),(0,a.kt)("h3",{id:"conditionals-and-loops"},"Conditionals and loops"),(0,a.kt)("p",null,"if \u5224\u65b7\u5f0f\u4e0d\u61c9\u8a72\u88ab\u6253\u65b7\uff0c\u6703\u9020\u6210 ",(0,a.kt)("inlineCode",{parentName:"p"},"\u7e2e\u6392\u6df7\u6dc6")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Bad:\n// The second if statement is aligned with the code within the if block, causing\n// indentation confusion.\nif db.CurrentStatusIs(db.InTransaction) &&\n    db.ValuesEqual(db.TransactionKey(), row.Key()) {\n    return db.Errorf(db.TransactionError, "query failed: row (%v): key does not match transaction key", row)\n}\n')),(0,a.kt)("p",null,"boolean operands \u53ef\u4ee5\u5148\u9032\u884c\u63d0\u53d6 :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Good:\ninTransaction := db.CurrentStatusIs(db.InTransaction)\nkeysMatch := db.ValuesEqual(db.TransactionKey(), row.Key())\nif inTransaction && keysMatch {\n    return db.Error(db.TransactionError, "query failed: row (%v): key does not match transaction key", row)\n}\n')),(0,a.kt)("h3",{id:"copy"},"Copy"),(0,a.kt)("p",null,"\u7576 copy \u4e00\u500b struct \u7684\u6642\u5019\u9700\u8981\u7279\u5225\u5c0f\u5fc3\uff0c\u53ef\u80fd\u6703\u9020\u6210\u610f\u60f3\u4e0d\u5230\u7684 bug"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Bad:\nb1 := bytes.Buffer{}\nb2 := b1\n")),(0,a.kt)("p",null,"\u4e0a\u9762\u9019\u6bb5\u4f8b\u5b50\uff0cb2 copy b1 struct \uff0cbuffer \u5305\u542b\u4e86 bytes \u7684 slice \uff0c\u6709\u53ef\u80fd\u6539\u52d5 b2 \u7684\u503c\u6703\u9023 b1 \u7684\u503c\u4e5f\u4e00\u8d77\u6539\u52d5"),(0,a.kt)("p",null,"\u5982\u679c\u8981\u907f\u514d\u9019\u7a2e\u72c0\u6cc1 \u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"receiver")," \u88e1\u9762\u4f7f\u7528 return pointer \u53ef\u4ee5\u907f\u514d\u9019\u7a2e\u72c0\u6cc1\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\ntype Record struct {\n  buf bytes.Buffer\n  // other fields omitted\n}\n\nfunc New() *Record {...}\n\nfunc (r *Record) Process(...) {...}\n\nfunc Consumer(r *Record) {...}\n")),(0,a.kt)("h3",{id:"pass-values"},(0,a.kt)("a",{parentName:"h3",href:"https://google.github.io/styleguide/go/decisions#pass-values"},"Pass values")),(0,a.kt)("p",null,"==Do not pass pointers as function arguments=="),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"\u4f46\u6b64\u5efa\u8b70\u4e0d\u9069\u7528\u65bc\u6bd4\u8f03\u5927\u7684 struct \u6216\u8005\u662f \u53ef\u80fd\u589e\u5927\u7684 \u5c0f\u578b struct")),(0,a.kt)("h3",{id:"receiver-type"},"Receiver type"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c receiver \u662f\u4e00\u500b slice \u800c\u4e14 method \u4e0d\u6703 reslice \u548c reallocate the slice\uff0c receiver \u7528 ",(0,a.kt)("inlineCode",{parentName:"li"},"value"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\ntype Buffer []byte\n\nfunc (b Buffer) Len() int { return len(b) }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c receiver \u88e1\u7684 method \u6703\u6539\u8b8a receiver \u7684\u503c\uff0c\u90a3 receiver \u4e00\u5b9a\u8981\u7528 ",(0,a.kt)("inlineCode",{parentName:"li"},"pointer"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\ntype Counter int\n\nfunc (c *Counter) Inc() { *c++ }\n\n// See https://pkg.go.dev/container/heap.\ntype Queue []Item\n\nfunc (q *Queue) Push(x Item) { *q = append([]Item{x}, *q...) }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c receiver \u662f\u4e00\u500b \u5305\u542b field \u662f cannot safely be copied\uff0c\u9700\u8981\u7528 pointer:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\ntype Counter struct {\n    mu    sync.Mutex\n    total int\n}\n\nfunc (c *Counter) Inc() {\n    c.mu.Lock()\n    defer c.mu.Unlock()\n    c.total++\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c receiver \u662f\u4e00\u500b struct \uff0c\u800c\u4e14\u5305\u542b \u53ef\u80fd\u88ab\u6539\u8b8a\u7684 pointer element\uff0c \u5247\u4f7f\u7528 pointer:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\ntype Counter struct {\n    m *Metric\n}\n\nfunc (c *Counter) Inc() {\n    c.m.Add(1)\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c receiver \u662f\u4e00\u500b build-in type \u50cf\u662f string or int\uff0c\u4e14\u4e0d\u6703\u88ab\u6539\u8b8a\uff0c\u5247\u7528 value:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\ntype User string\n\nfunc (u User) String() { return string(u) }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c receiver \u662f\u4e00\u500b map, function, or channel\uff0c\u5247\u7528 value :")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Good:\n// See https://pkg.go.dev/net/http#Header.\ntype Header map[string][]string\n\nfunc (h Header) Add(key, value string) { /* omitted */ }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c receiver \u662f\u4e00\u500b\u5f88\u5c0f\u7684 array or struct \u4e26\u4e14 value \u4e0d\u6703\u88ab\u6539\u8b8a\uff0c\u5247\u4f7f\u7528 value :")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// Good:\n// See https://pkg.go.dev/time#Time.\ntype Time struct { /* omitted */ }\n\nfunc (t Time) Add(d Duration) Time { /* omitted */ }\n")),(0,a.kt)("h3",{id:"use-q"},"Use %q"),(0,a.kt)("p",null,"\u4f7f\u7528 %q \u4f86\u8868\u793a \u96d9\u5f15\u865f\u7684 \u8f38\u51fa"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Good:\nfmt.Printf("value %q looks like English text", someText)\n')),(0,a.kt)("h2",{id:"common-libraries"},"Common libraries"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"flags"},"Flags"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"flag \u540d\u7a31\u76e1\u91cf\u7528 sanke case"),(0,a.kt)("li",{parentName:"ul"},"\u8b8a\u6578\u7528 camel case")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Good:\nvar (\n    pollInterval = flag.Duration("poll_interval", time.Minute, "Interval to use for polling.")\n)\n')),(0,a.kt)("h3",{id:"contexts"},"Contexts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u901a\u5e38\u7576\u7b2c\u4e00\u500b\u53c3\u6578"),(0,a.kt)("li",{parentName:"ul"},"contexts \u901a\u5e38\u7576\u4f5c \u53c3\u6578 \u50b3\u5165 function",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"When designing an API with context, remember the advice: pass\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"context.Context"),"\xa0in as an argument; don\u2019t store it in structs.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Worker fetches and adds works to a remote work orchestration server.\ntype Worker struct { /* \u2026 */ }\n\ntype Work struct { /* \u2026 */ }\n\nfunc New() *Worker {\n  return &Worker{}\n}\n\nfunc (w *Worker) Fetch(ctx context.Context) (*Work, error) {\n  _ = ctx // A per-call ctx is used for cancellation, deadlines, and metadata.\n}\n\nfunc (w *Worker) Process(ctx context.Context, work *Work) error {\n  _ = ctx // A per-call ctx is used for cancellation, deadlines, and metadata.\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"context \u653e\u9032 structs \u88cf\u9762\u662f\u4e0d\u597d\u7684\u884c\u70ba")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u6703\u6709\u6a21\u7cca\u4e0d\u6e05\u7684\u547c\u53eb\u6642\u6a5f"),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"the user is unable to provide a deadline just for\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"(*Worker).Fetch"),", or cancel just the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"(*Worker).Process"),"\xa0call.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type Worker struct {\n  ctx context.Context\n}\n\nfunc New(ctx context.Context) *Worker {\n  return &Worker{ctx: ctx}\n}\n\nfunc (w *Worker) Fetch() (*Work, error) {\n  _ = w.ctx // A shared w.ctx is used for cancellation, deadlines, and metadata.\n}\n\nfunc (w *Worker) Process(work *Work) error {\n  _ = w.ctx // A shared w.ctx is used for cancellation, deadlines, and metadata.\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An API example with context time out")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "net/http"\n    "time"\n)\n\nfunc main() {\n    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {\n        ctx, cancel := context.WithTimeout(r.Context(), 1*time.Second)\n        defer cancel()\n\n        select {\n        case <-time.After(2 * time.Second):\n            w.Write([]byte("Slow operation complete"))\n        case <-ctx.Done():\n            w.Write([]byte("Request timed out"))\n        }\n    })\n\n    err := http.ListenAndServe(":8080", nil)\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n')),(0,a.kt)("h3",{id:"table-driven-tests"},"Table-driven tests"),(0,a.kt)("p",null,"\u6709\u4e0d\u540c\u7684\u6e2c\u8a66\u5b50\u96c6\u9700\u8981\u88ab\u6e2c\u8a66\u6642"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Use table-driven tests when many different test cases can be tested using similar testing logic.")))}d.isMDXComponent=!0}}]);