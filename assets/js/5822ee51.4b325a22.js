"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7594],{3905:(n,e,a)=>{a.d(e,{Zo:()=>f,kt:()=>d});var t=a(7294);function r(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function o(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,t)}return a}function l(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function i(n,e){if(null==n)return{};var a,t,r=function(n,e){if(null==n)return{};var a,t,r={},o=Object.keys(n);for(t=0;t<o.length;t++)a=o[t],e.indexOf(a)>=0||(r[a]=n[a]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)a=o[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(r[a]=n[a])}return r}var s=t.createContext({}),g=function(n){var e=t.useContext(s),a=e;return n&&(a="function"==typeof n?n(e):l(l({},e),n)),a},f=function(n){var e=g(n.components);return t.createElement(s.Provider,{value:e},n.children)},c="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},u=t.forwardRef((function(n,e){var a=n.components,r=n.mdxType,o=n.originalType,s=n.parentName,f=i(n,["components","mdxType","originalType","parentName"]),c=g(a),u=r,d=c["".concat(s,".").concat(u)]||c[u]||p[u]||o;return a?t.createElement(d,l(l({ref:e},f),{},{components:a})):t.createElement(d,l({ref:e},f))}));function d(n,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=n,i[c]="string"==typeof n?n:r,l[1]=i;for(var g=2;g<o;g++)l[g]=a[g];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7325:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>g});var t=a(7462),r=(a(7294),a(3905));const o={id:"golang-flag",title:"Golang Flag Example",sidebar_position:1},l=void 0,i={unversionedId:"golang/golang-flag",id:"golang/golang-flag",title:"Golang Flag Example",description:"Golang Flag",source:"@site/studynotes/golang/golang-flag.md",sourceDirName:"golang",slug:"/golang/golang-flag",permalink:"/studynotes/golang/golang-flag",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"golang-flag",title:"Golang Flag Example",sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Golang Code Style",permalink:"/studynotes/golang/golang-code-style"},next:{title:"Kubernetes",permalink:"/studynotes/category/kubernetes"}},s={},g=[{value:"Golang Flag",id:"golang-flag",level:2}],f={toc:g},c="wrapper";function p(n){let{components:e,...a}=n;return(0,r.kt)(c,(0,t.Z)({},f,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"golang-flag"},"Golang Flag"),(0,r.kt)("p",null,"Go provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"flag")," package supporting basic command-line flag parsing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "flag"\n    "fmt"\n)\n\nfunc main() {\n\n    // Basic flag declarations are available for string,\n    // integer, and boolean options. Here we declare a\n    // string flag `word` with a default value `"foo"`\n    // and a short description. This `flag.String` function\n    // returns a string pointer (not a string value);\n    // we\'ll see how to use this pointer below.\n    wordPtr := flag.String("word", "foo", "a string")\n\n    // This declares `numb` and `fork` flags, using a\n    // similar approach to the `word` flag.\n    numbPtr := flag.Int("numb", 42, "an int")\n    forkPtr := flag.Bool("fork", false, "a bool")\n\n    // It\'s also possible to declare an option that uses an\n    // existing var declared elsewhere in the program.\n    // Note that we need to pass in a pointer to the flag\n    // declaration function.\n    var svar string\n    flag.StringVar(&svar, "svar", "bar", "a string var")\n\n    // Once all flags are declared, call `flag.Parse()`\n    // to execute the command-line parsing.\n    flag.Parse()\n\n    // Here we\'ll just dump out the parsed options and\n    // any trailing positional arguments. Note that we\n    // need to dereference the pointers with e.g. `*wordPtr`\n    // to get the actual option values.\n    fmt.Println("word:", *wordPtr)\n    fmt.Println("numb:", *numbPtr)\n    fmt.Println("fork:", *forkPtr)\n    fmt.Println("svar:", svar)\n    fmt.Println("tail:", flag.Args())\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ ./command-line-flags -word=opt -numb=7 -fork -svar=flag\nword: opt\nnumb: 7\nfork: true\nsvar: flag\ntail: []\n\n$ ./command-line-flags -word=opt\nword: opt\nnumb: 42\nfork: false\nsvar: bar\ntail: []\n\n$ ./command-line-flags -word=opt a1 a2 a3\nword: opt\n...\ntail: [a1 a2 a3]\n\n$ ./command-line-flags -word=opt a1 a2 a3 -numb=7\nword: opt\nnumb: 42\nfork: false\nsvar: bar\ntail: [a1 a2 a3 -numb=7]\n\n$ ./command-line-flags -h\nUsage of ./command-line-flags:\n  -fork=false: a bool\n  -numb=42: an int\n  -svar="bar": a string var\n  -word="foo": a string\n\n$ ./command-line-flags -wat\nflag provided but not defined: -wat\nUsage of ./command-line-flags:\n...\n')))}p.isMDXComponent=!0}}]);